#!/bin/bash
#
#  script for submitting parallel Fluent jobs to the sun grid engine.
#
# 05 May, 2005        DS  Rewritten 
#  Dec, 2008          DS  changed parallel features               
#
help()
{
echo ' THIS COMMAND SUBMITS SERIAL or PARALLEL FLUENT JOBS TO THE SUN GRID ENGINE '
echo ' -------------------------------------------------------------------------- '
echo ' Usage:' `basename $0` '[2d,2ddp,3d or 3ddp] fluent_journal_file  -time hh:mm:ss [-mem=nn]'
echo '       [-rmem=nn] [-mail your_email_address] [-nq] [-parallel nprocs][optional_extra_fluent_params]'
echo ' Where; '
echo '  All but the first two parameters are optional. '
echo ' First parameter is the dimensionality of the problem.' 
echo ' Second parameter, fluent_journal_file, is the file containing the fluent commands.'
echo " Other 'optional' parameters are:" 
echo '    -time hh:mm:ss is the cpu time needed in hours:minutes:seconds '
echo '    -mem=nn is the virtual memory needed (Default=8G). Example: -mem 12G (for 12 GBytes)'
echo '    -rmem=nn is the real memory needed.(Default=2G). Example: -rmem 4G (for 4 GBytes)'
echo '    -mail email_address. You will receive emails about the progress of your job' 
echo '                         Example:  -mail J.Bloggs@sheffield.ac.uk  '
echo '    -nq is an optional parameter to submit without confirming '
echo '    -parallel nprocs : Only needed for parallel jobs to specify the no.of processors.'
echo '    -project project_name : The job will use a project allocation.' 
echo '    fluent_params : any parameter not recognised will also be passed onto '
echo '                    the fluent startup script. ' 
echo ' '   
echo ' Example: ' `basename $0` ' 3d nozzle.jou -time 00:30:00 -mem=10G'
echo ' Fluent journal files are essentially a sequence of Fluent Commands'
echo ' you would have entered by starting fluent in non-gui mode'
echo ' Here is an example journal file:' 
echo '        /file/read-case test.cas '
echo '        /file/read-data test.dat '
echo '        /solve iter 200 '
echo '       /file/write-data testv5b.dat' 
echo '        yes '
echo '      /exit ' 
echo '        yes '
echo ' Note that there can be no graphics output related commands '
echo '      in the journal file as the job will be run in batch mode' 
echo ' Please see fluent documents for further details of journal files and'
echo '      how to create them by typing-  docs '
echo ' You can startup an interactive fluent session in non-gui mode to ' 
echo '  experiment. For example, by using the command: qrsh fluent 3d -g '
}
tolower() {
     echo "$1" | tr [:upper:] [:lower:]
}

if [ -z $ANSYSROOT ] ; then
   echo " Please use 'module load apps/ansys' command first "
   echo "so as to indicate which version of fluent to use. "
   echo -e " Currently we have the following versions: \n"
   module avail apps/ansys
   exit 1
fi


if test -z "$1" 
then 
      help 
      exit 1
else
      dimens=`tolower "$1"`
#debug  echo $dimens 
      fldimen="0"
      if [[ $dimens = "3d" ]] 
      then
        fldimen="-v3d"
      elif [[ $dimens = "3ddp" ]] 
      then 
        fldimen="-v3ddp"	
     elif [[ $dimens = "2d" ]]
      then 
        fldimen="-v2d"
     elif [[ $dimens = "2ddp" ]] 
      then 
        fldimen="-v2ddp"    	
      fi
# debug      echo $fldimen
fi

     if [ "$fldimen" = "0" ] 
     then
       if [ "$1" = '-h' -o "$1" = "-help" -o "$1" = "h" -o "$1" = "help" ]
       then
          help
          exit 1
       fi
       echo ' ' 
       echo '*** Error:The first parameter must be one of 2D, 2DDP, 3D or 3DDP'
       exit 
     fi  

if [ -z "$2" ]  ; then
	echo ' '
	echo "**the journal file containing the fluent commands was not specified."
	echo ' '
        help
	exit 1
else 
       if [ -r "$2" ] ; then
# debug           echo " Using file '$2' as Fluent journal file"
           fljourn="$2"
       else
           echo " Specified journal file '$2' does not exist or is not accesible."
           exit 1
       fi
fi

#
# below is a template for accessing the keyword parameters. There is only one 
# now but can increase later.
# 
time="notset"
mem="8G"
rmem="2G"
mail="0"
subnow="0"
nprocs="0"
allowed="48"
arch=" "
project=" "
shift;shift   #  remove first two parameters (i.e. dim and journal file )
while [ $# -gt 0 ]; do
# debug  echo $1
  case `tolower "$1"` in
    
     "-time="*  ) time=${1:6} ;; 
     -time      ) time="$2";shift;;

     "-mem="*   ) mem=${1:5} ;; 
     -mem       ) mem="$2";shift;;

    "-rmem="*   ) rmem=${1:6} ;; 
     -rmem      ) rmem="$2";shift;;
     -arch=*    ) arch="-l arch="${1:6};;
     -arch      ) arch="-l arch="$2;shift;; 
     -mail      ) mail="$2";shift;;
     -project  ) project="-P $2 -q $2.q"; if  echo $2 | grep "insigneo" > /dev/null; then project=${project}" -v LM_PROJECT=INSIGNEO_USER"; fi ;shift;;
     -nq       ) subnow="1";;
     -t|-parallel) nprocs="$2";rest="$rest"" -t""$2";shift;;
     -t*       ) nprocs=`echo "$1"|cut -c3-4`;rest="$rest"" ""$1";shift;;
     *) rest="$rest"" ""$1";;
  esac
  shift
done

# debug echo $rest
# debug echo $time
if [ "$time" == "notset" ] ; then
   echo -e '\n\nTime parameter has not been specified. '
   echo 'Assuming the default cpu-time of 1 hours: i.e. -time 01:00:00 '
   time='01:00:00'

fi

# test if it is a parallel job.
if [[ "$nprocs" == "0" ]] 
then
   para=" "
  
else 
 
# check if it is a valid integer. Cludge
    expr $nprocs + 1 > /dev/null
   if [ "$?" != 0 ] ;then
    echo "----- ERROR --------"
    echo ' Invalid or non-numeric number of processors specified via -t.'
    echo " The -t parameter must specify an integer between 2 and $allowed" 
    exit 1
   fi
 
   if [ "$nprocs" -gt "$allowed" -o "$nprocs" -lt 0 ] ; then
     echo "----- ERROR --------"
     echo " Currently maximum of $allowed processors are allowed per Parallel job"
     echo "The -parallel or -t parameter must specify an integer between 2 and $allowed" 
     exit 1
   fi
 
#d      echo -e " A parallel job requested. If the cluster is not heavily loaded use the infiniband connectivity."
#d      echo -e " If the cluster is heavily loaded a faster turnround is possible via the ethernet connectivity. " 
#d      echo -e " \n Do you wish to use Infiniband (Yes/No) ? \c " 
#d      read answer
#d      answ=`tolower $answer` 
#d      if [ "$answ" = "y" -o "$answ" = "yes" -o "$answ" = "ye"  ] ; then   
           echo -e "\n Using infiniband connectivity." 
           para="-pe openmpi-ib ""$nprocs"
          rest="$rest -pib -mpi=openmpi -cnf=\$TMPDIR/machines"
#d      else  
#d         echo -e "\n Using Gigabit Ethernet connectivity." 
#d         para="-pe ompigige ""$nprocs"
#d         rest="$rest -pethernet -mpi=openmpi -cnf=\$TMPDIR/machines"
#d    fi 

fi
 # echo rest is = $rest
fldim=`echo $fldimen | cut -c3-6`
echo ""; echo 'The following job will be submitted to the job queue:'
echo 'Execute Fluent version 14.5'  
echo 'Fluent Journal Input file :' $fljourn 
echo 'Problem Dimensionality    :' $fldim
echo 'Maximum cpu time(hh:mm:ss):' $time 
echo 'Maximum virtual memory needs :' $mem
echo 'Maximum   real  memory needs :' $rmem
if test "$nprocs" != "0" ; then 
 echo "This is a parallel jobs with $nprocs processors."
fi
 
echo -e " \n The command used to submit the job is:"
echo "  qsub -cwd -l h_rt=$time $arch $para -l mem=$mem -l rmem=$rmem $project fluent${ANSYSVER}job $fldimen -g -i $fljourn $rest "
if [ "$subnow" = "0" ] 
 then
    echo -e " \n Do you wish to submit this job (Yes/No) ? \c" 
    read answer
    answ=`tolower $answer`
    if [ "$answ" = "y" -o "$answ" = "yes" -o "$answ" = "ye"  ]
     then
     subnow="1" 
    fi
fi

if test "$subnow" = "1" 
 then

 
   if test "$mail" = "0"
     then 
       qsub -cwd -l h_rt=$time -l mem=$mem -l rmem=$rmem $project $arch $para /usr/local/packages6/shef/ansys/batch/fluent${ANSYSVER}job $fldimen -g -i $fljourn $rest
     else
      qsub -cwd -m bea -M $mail -l h_rt=$time -l mem=$mem -l rmem=$rmem $project $arch $para /usr/local/packages6/shef/ansys/batch/fluent${ANSYSVER}job $fldimen -g -i $fljourn $rest
   fi

   echo 'Use the Qstat command to check progress of the job.' 
  else
    echo 'Job Aborted.....'
  fi


